import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.mayhem"
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            keyAlias 'zlaki.games'
            keyPassword 'natureq1w2e3'
            storeFile file('../../zlaki.games.keystore')
            storePassword 'natureq1w2e3'
            storeType "jks"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            jniDebuggable true
        }
    }

    flavorDimensions "abi"
    productFlavors {
        arm7 {
            dimension "abi"
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        arm8 {
            dimension "abi"
            ndk {
                abiFilter "arm64-v8a"
            }
        }
        x86 {
            dimension "abi"
            ndk {
                abiFilter "x86"
            }
        }
        x64 {
            dimension "abi"
            ndk {
                abiFilter "x86_64"
            }
        }
        // for detailed abiFilter descriptions, refer to "Supported ABIs" @
        // https://developer.android.com/ndk/guides/abis.html#sa

        // build one including all cpu architectures
        allPlatform {
            dimension "abi"
        }
    }
}

dependencies {
    compile 'com.google.android.gms:play-services-ads:8.4.0'
}

//////////////////////////////////////////////////////////////////////////////////////////
// Building native libraries
//////////////////////////////////////////////////////////////////////////////////////////
class NativeConfig {
    String command;
    String preProcess;
    String postProcess;

    def preProcessEmu(basePath, buildConfig) {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            this.preProcess = '"' + basePath.toString().replaceAll('\\\\', '/') + '/before_emu.cmd", "&", '
        } else
            this.preProcess = 'export C64_LIB_BASE_PATH=../../../../vice-2.4-android/android/ && ./before_emu.sh && '
    }

    def postProcessEmu(basePath, buildConfig) {
        if (Os.isFamily(Os.FAMILY_WINDOWS))
            this.postProcess = ', "&", "' + basePath.toString().replaceAll('\\\\', '/') + '/after_emu.cmd"'
        else
            this.postProcess = ' && ./after_emu.sh'
    }

    def preProcessGame(basePath, buildConfig) {
        //... Nothing to do ...
        this.preProcess = ""
    }

    def postProcessGame(basePath, buildConfig) {
        if (buildConfig == "debug") {
            if (Os.isFamily(Os.FAMILY_WINDOWS))
                this.postProcess = ', "&", "' + basePath.toString().replaceAll('\\\\', '/') + '/after_game.cmd"'
            else
                this.postProcess = ' && ./after_game.sh'
        } else {
            this.postProcess = ""
        }
    }

    def buildCommand(rootProj, basePath, abiFilter, buildConfig, scriptPath, preProcess, postProcess, ndkCFlags, ndkCPPFlags) {
        //Get NDK directory
        String ndkdir = null
        if (System.env.ANDROID_NDK_ROOT != null)
            ndkdir = System.env.ANDROID_NDK_ROOT

        if (ndkdir == null) {
            def properties = new Properties()
            properties.load(rootProj.file('local.properties').newDataInputStream())
            ndkdir = properties.getProperty('ndk.dir', null)
        }

        if (ndkdir == null)
            throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

        //Compose command
        def ndkbuild = ndkdir + "/ndk-build"
        if (Os.isFamily(Os.FAMILY_WINDOWS))
            ndkbuild += ".cmd"

        def ndkABIs = "APP_ABI=x86 armeabi-v7a arm64-v8a x86_64"
        def ndkDebug = "NDK_DEBUG=1"

        if (abiFilter == "x86") {
            ndkABIs = "APP_ABI=x86"
        } else if (abiFilter == "arm7") {
            ndkABIs = "APP_ABI=armeabi-v7a"
        } else if (abiFilter == "arm8") {
            ndkABIs = "APP_ABI=arm64-v8a"
        } else if (abiFilter == "x64") {
            ndkABIs = "APP_ABI=x86_64"
        } else if (abiFilter == "all") {
            ndkABIs = "APP_ABI=x86 armeabi-v7a arm64-v8a x86_64"
        }

        if (buildConfig == "debug") {
            ndkDebug = "NDK_DEBUG=1"
        } else if (buildConfig == "release") {
            ndkDebug = "NDK_DEBUG=0"
        }

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            this.command = "[" + preProcess +
                    "\"" + ndkbuild + "\"" +
                    ', "-j8"' +
                    ', "NDK_PROJECT_PATH=../../build/intermediates/ndk"' +
                    ', "NDK_LIBS_OUT=jniLibs"' +
                    ', "APP_BUILD_SCRIPT=' + scriptPath + '/Android.mk"' +
                    ', "NDK_APPLICATION_MK=' + scriptPath + '/Application.mk"' +
//                    ', "V=1"' +
                    ", \"${ndkABIs}\"" +
                    ", \"${ndkDebug}\"" +
                    ", \"${ndkCFlags}\"" +
                    ", \"${ndkCPPFlags}\"" +
                    ', "-C' + basePath + '"' +
                    postProcess +
                    "]"
        } else {
            this.command = "[\"sh\", \"-c\", \"" + preProcess +
                    ndkbuild +
                    ' -j8' +
                    ' \\\"NDK_PROJECT_PATH=../../build/intermediates/ndk\\\"' +
                    ' \\\"NDK_LIBS_OUT=jniLibs\\\"' +
                    ' \\\"APP_BUILD_SCRIPT=' + scriptPath + '/Android.mk\\\"' +
                    ' \\\"NDK_APPLICATION_MK=' + scriptPath + '/Application.mk\\\"' +
//                    ' V=1' +
                    " \\\"${ndkABIs}\\\"" +
                    " \\\"${ndkDebug}\\\"" +
                    " \\\"${ndkCFlags}\\\"" +
                    " \\\"${ndkCPPFlags}\\\"" +
                    ' \\\"-C' + basePath + '\\\"' +
                    postProcess +
                    "\"]"
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////
// libc64emu.so tasks
//////////////////////////////////////////////////////////////////////////////////////////
task ndkBuildEmuAllDebug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "debug")
    nativeConfig.postProcessEmu(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "all", "debug", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuAllRelease(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "release")
    nativeConfig.postProcessEmu(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "all", "release", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -O1"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuArm7Debug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "debug")
    nativeConfig.postProcessEmu(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "arm7", "debug", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuArm7Release(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "release")
    nativeConfig.postProcessEmu(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "arm7", "release", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -O1"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuArm8Debug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "debug")
    nativeConfig.postProcessEmu(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "arm8", "debug", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuArm8Release(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "release")
    nativeConfig.postProcessEmu(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "arm8", "release", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -O1"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuX86Debug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "debug")
    nativeConfig.postProcessEmu(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "x86", "debug", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuX86Release(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "release")
    nativeConfig.postProcessEmu(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "x86", "release", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -O1"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuX64Debug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "debug")
    nativeConfig.postProcessEmu(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "x64", "debug", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildEmuX64Release(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessEmu(projectDir, "release")
    nativeConfig.postProcessEmu(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "x64", "release", "../../../../vice-2.4-android/android"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "VICE_CFLAGS=-DIDE_COMPILE -D_DEBUG -O1"
            , "VICE_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

//////////////////////////////////////////////////////////////////////////////////////////
// libgame.so tasks
//////////////////////////////////////////////////////////////////////////////////////////
task ndkBuildAllDebug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "debug")
    nativeConfig.postProcessGame(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "all", "debug", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildAllRelease(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "release")
    nativeConfig.postProcessGame(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "all", "release", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -DNDEBUG -O1"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -DNDEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildArm7Debug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "debug")
    nativeConfig.postProcessGame(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "arm7", "debug", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildArm7Release(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "release")
    nativeConfig.postProcessGame(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "arm7", "release", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -DNDEBUG -O1"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -DNDEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildArm8Debug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "debug")
    nativeConfig.postProcessGame(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "arm8", "debug", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildArm8Release(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "release")
    nativeConfig.postProcessGame(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "arm8", "release", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -DNDEBUG -O1"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -DNDEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildX86Debug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "debug")
    nativeConfig.postProcessGame(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "x86", "debug", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildX86Release(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "release")
    nativeConfig.postProcessGame(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "x86", "release", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -DNDEBUG -O1"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -DNDEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildX64Debug(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "debug")
    nativeConfig.postProcessGame(projectDir, "debug")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "x64", "debug", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -D_DEBUG -g -ggdb -O0")
    commandLine Eval.me(nativeConfig.command)
}

task ndkBuildX64Release(type: Exec) {
    def nativeConfig = new NativeConfig()
    nativeConfig.preProcessGame(projectDir, "release")
    nativeConfig.postProcessGame(projectDir, "release")
    nativeConfig.buildCommand(project.rootProject, 'src/main', "x64", "release", "jni"
            , nativeConfig.preProcess, nativeConfig.postProcess
            , "GAME_CFLAGS=-DIDE_COMPILE -DNDEBUG -O1"
            , "GAME_CPPFLAGS=-DIDE_COMPILE -DNDEBUG -O1")
    commandLine Eval.me(nativeConfig.command)
}

tasks.withType(JavaCompile) {
    compileTask ->
        if (compileTask.name.startsWith("compileAllPlatformDebugJava")) {
            ndkBuildAllDebug.dependsOn ndkBuildEmuAllDebug
            compileTask.dependsOn ndkBuildAllDebug
        } else if (compileTask.name.startsWith("compileAllPlatformReleaseJava")) {
            ndkBuildAllRelease.dependsOn ndkBuildEmuAllRelease
            compileTask.dependsOn ndkBuildAllRelease
        } else if (compileTask.name.startsWith("compileArm7DebugJava")) {
            ndkBuildArm7Debug.dependsOn ndkBuildEmuArm7Debug
            compileTask.dependsOn ndkBuildArm7Debug
        } else if (compileTask.name.startsWith("compileArm7ReleaseJava")) {
            ndkBuildArm7Release.dependsOn ndkBuildEmuArm7Release
            compileTask.dependsOn ndkBuildArm7Release
        } else if (compileTask.name.startsWith("compileArm8DebugJava")) {
            ndkBuildArm8Debug.dependsOn ndkBuildEmuArm8Debug
            compileTask.dependsOn ndkBuildArm8Debug
        } else if (compileTask.name.startsWith("compileArm8ReleaseJava")) {
            ndkBuildArm8Release.dependsOn ndkBuildEmuArm8Release
            compileTask.dependsOn ndkBuildArm8Release
        } else if (compileTask.name.startsWith("compileX86DebugJava")) {
            ndkBuildX86Debug.dependsOn ndkBuildEmuX86Debug
            compileTask.dependsOn ndkBuildX86Debug
        } else if (compileTask.name.startsWith("compileX86ReleaseJava")) {
            ndkBuildX86Release.dependsOn ndkBuildEmuX86Release
            compileTask.dependsOn ndkBuildX86Release
        } else if (compileTask.name.startsWith("compileX64DebugJava")) {
            ndkBuildX64Debug.dependsOn ndkBuildEmuX64Debug
            compileTask.dependsOn ndkBuildX64Debug
        } else if (compileTask.name.startsWith("compileX64ReleaseJava")) {
            ndkBuildX64Release.dependsOn ndkBuildEmuX64Release
            compileTask.dependsOn ndkBuildX64Release
        }
}

tasks.all { task ->
    if (task.name.startsWith('compile') && task.name.endsWith('Ndk')) {
        task.enabled = false
    }
}
